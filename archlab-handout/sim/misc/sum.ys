# Jordan Golden golde3


# Execution begins at address 0
	.pos 0
init:	
    irmovq stack, %rsp # Set up stack pointer
	call main              # Execute main program
	halt                   # Terminate program

# Sample linked list
.align 8
ele1:
	.quad 0x00a
	.quad ele2
ele2:
	.quad 0x0b0
	.quad ele3
ele3:
	.quad 0xc00
	.quad 0

main:	
	irmovq ele1, %rdi
	irmovq $1, %rsi
	call sum_list
	ret

	# int sum_list(list_ptr ls)
sum_list:
	irmovq $8, %r8
	irmovq $1, %r9    # rcx = ls
	xorq %rax, %rax   # rax <- val = 0
	andq %rsi, %rsi	  # Set condition codes
	jmp test
loop:	
    mrmovq (%rdi), %r10  # get ls->val
	addq %r10, %rax      # val += ls->val
	addq %r8, %rdi       # ls = ls->next
	mrmovq (%rdi), %rdi
	andq %rdi, %rdi
test:	
    jne loop
	ret

# The stack starts here and grows to lower addresses
	.pos 0x200
stack:

