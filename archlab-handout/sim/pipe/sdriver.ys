#######################################################################
# Test for copying block of size 4;
#######################################################################
	.pos 0
main:	irmovq Stack, %rsp  	# Set up stack pointer

	# Set up arguments for copy function and then invoke it
	irmovq $4, %rdx		# src and dst have 4 elements
	irmovq dest, %rsi	# dst array
	irmovq src, %rdi	# src array
	call ncopy		 
	halt			# should halt with num nonzeros in %rax
StartFun:
#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
	xorq %rax, %rax		# count = 0;
    rrmovq %rdx, %rcx
    iaddq $-8, %rcx
	andq %rdx, %rdx		# len <= 0?
	jle Remain		# if so, goto Done:
Loop:	
    mrmovq (%rdi), %r8	# read val from src...
    mrmovq 8(%rdi), %r9
    mrmovq 16(%rdi), %r10
    mrmovq 24(%rdi), %r11
    mrmovq 32(%rdi), %r12
    mrmovq 40(%rdi), %r13
    mrmovq 48(%rdi), %r14
    mrmovq 56(%rdi), %rbx
	rmmovq %r8, (%rsi)	# ...and store it to dst
	rmmovq %r9, 8(%rsi)
	rmmovq %r10, 16(%rsi)
	rmmovq %r11, 24(%rsi)
	rmmovq %r12, 32(%rsi)
	rmmovq %r13, 40(%rsi)
	rmmovq %r14, 48(%rsi)
	rmmovq %rbx, 56(%rsi)
ele1:
	andq %r8, %r8		# val <= 0?
	jle ele2		    # if so, goto Npos:
	iaddq $1, %rax		# count++
ele2:
    andq %r9, %r9
    jle ele3
    iaddq $1, %rax
ele3:
    andq %r10, %r10
    jle ele4
    iaddq $1, %rax
ele4:
    andq %r11, %r11
    jle ele5
    iaddq $1, %rax
ele5:
    andq %r12, %r12
    jle ele6
    iaddq $1, %rax
ele6:
    andq %r13, %r13
    jle ele7
    iaddq $1, %rax
ele7:
    andq %r14, %r14
    jle ele8
    iaddq $1, %rax
ele8:
    andq %rbx, %rbx
    jle Update
    iaddq $1, %rax
Update:	
	iaddq $64, %rdi		# src++
	iaddq $64, %rsi		# dst++
    iaddq $-8, %rdx      #len-- >0?
    iaddq $-8, %rcx
	jg Loop			# if so, goto Loop:
Remain:
    andq %rdx, %rdx
    jle Done
RLoop:
    mrmovq (%rdi), %rbx
	rmmovq %rbx, (%rsi)
	andq %rbx, %rbx
	jle RNpos
	iaddq $1, %rax
RNpos:
    iaddq $8, %rdi
    iaddq $8, %rsi
    iaddq $-1, %rdx
    jg RLoop
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
EndFun:

###############################
# Source and destination blocks 
###############################
	.align 8
src:
	.quad 1
	.quad 2
	.quad -3
	.quad -4
	.quad 0xbcdefa # This shouldn't get moved

	.align 16
Predest:
	.quad 0xbcdefa
dest:
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
Postdest:
	.quad 0xdefabc

.align 8
# Run time stack
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0

Stack:
