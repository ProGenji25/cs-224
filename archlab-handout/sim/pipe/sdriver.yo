                            | #######################################################################
                            | # Test for copying block of size 4;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f40003000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20400000000000000 | 	irmovq $4, %rdx		# src and dst have 4 elements
0x014: 30f65802000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f72002000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x032: 6300                 | 	xorq %rax, %rax		# count = 0;
0x034: 2021                 |     rrmovq %rdx, %rcx
0x036: c0f1f8ffffffffffffff |     iaddq $-8, %rcx
0x040: 6222                 | 	andq %rdx, %rdx		# len <= 0?
0x042: 71c401000000000000   | 	jle Remain		# if so, goto Done:
0x04b:                      | Loop:	
0x04b: 50870000000000000000 |     mrmovq (%rdi), %r8	# read val from src...
0x055: 50970800000000000000 |     mrmovq 8(%rdi), %r9
0x05f: 50a71000000000000000 |     mrmovq 16(%rdi), %r10
0x069: 50b71800000000000000 |     mrmovq 24(%rdi), %r11
0x073: 50c72000000000000000 |     mrmovq 32(%rdi), %r12
0x07d: 50d72800000000000000 |     mrmovq 40(%rdi), %r13
0x087: 50e73000000000000000 |     mrmovq 48(%rdi), %r14
0x091: 50373800000000000000 |     mrmovq 56(%rdi), %rbx
0x09b: 40860000000000000000 | 	rmmovq %r8, (%rsi)	# ...and store it to dst
0x0a5: 40960800000000000000 | 	rmmovq %r9, 8(%rsi)
0x0af: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi)
0x0b9: 40b61800000000000000 | 	rmmovq %r11, 24(%rsi)
0x0c3: 40c62000000000000000 | 	rmmovq %r12, 32(%rsi)
0x0cd: 40d62800000000000000 | 	rmmovq %r13, 40(%rsi)
0x0d7: 40e63000000000000000 | 	rmmovq %r14, 48(%rsi)
0x0e1: 40363800000000000000 | 	rmmovq %rbx, 56(%rsi)
0x0eb:                      | ele1:
0x0eb: 6288                 | 	andq %r8, %r8		# val <= 0?
0x0ed: 710001000000000000   | 	jle ele2		    # if so, goto Npos:
0x0f6: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x100:                      | ele2:
0x100: 6299                 |     andq %r9, %r9
0x102: 711501000000000000   |     jle ele3
0x10b: c0f00100000000000000 |     iaddq $1, %rax
0x115:                      | ele3:
0x115: 62aa                 |     andq %r10, %r10
0x117: 712a01000000000000   |     jle ele4
0x120: c0f00100000000000000 |     iaddq $1, %rax
0x12a:                      | ele4:
0x12a: 62bb                 |     andq %r11, %r11
0x12c: 713f01000000000000   |     jle ele5
0x135: c0f00100000000000000 |     iaddq $1, %rax
0x13f:                      | ele5:
0x13f: 62cc                 |     andq %r12, %r12
0x141: 715401000000000000   |     jle ele6
0x14a: c0f00100000000000000 |     iaddq $1, %rax
0x154:                      | ele6:
0x154: 62dd                 |     andq %r13, %r13
0x156: 716901000000000000   |     jle ele7
0x15f: c0f00100000000000000 |     iaddq $1, %rax
0x169:                      | ele7:
0x169: 62ee                 |     andq %r14, %r14
0x16b: 717e01000000000000   |     jle ele8
0x174: c0f00100000000000000 |     iaddq $1, %rax
0x17e:                      | ele8:
0x17e: 6233                 |     andq %rbx, %rbx
0x180: 719301000000000000   |     jle Update
0x189: c0f00100000000000000 |     iaddq $1, %rax
0x193:                      | Update:	
0x193: c0f74000000000000000 | 	iaddq $64, %rdi		# src++
0x19d: c0f64000000000000000 | 	iaddq $64, %rsi		# dst++
0x1a7: c0f2f8ffffffffffffff |     iaddq $-8, %rdx      #len-- >0?
0x1b1: c0f1f8ffffffffffffff |     iaddq $-8, %rcx
0x1bb: 764b00000000000000   | 	jg Loop			# if so, goto Loop:
0x1c4:                      | Remain:
0x1c4: 6222                 |     andq %rdx, %rdx
0x1c6: 711f02000000000000   |     jle Done
0x1cf:                      | RLoop:
0x1cf: 50370000000000000000 |     mrmovq (%rdi), %rbx
0x1d9: 40360000000000000000 | 	rmmovq %rbx, (%rsi)
0x1e3: 6233                 | 	andq %rbx, %rbx
0x1e5: 71f801000000000000   | 	jle RNpos
0x1ee: c0f00100000000000000 | 	iaddq $1, %rax
0x1f8:                      | RNpos:
0x1f8: c0f70800000000000000 |     iaddq $8, %rdi
0x202: c0f60800000000000000 |     iaddq $8, %rsi
0x20c: c0f2ffffffffffffffff |     iaddq $-1, %rdx
0x216: 76cf01000000000000   |     jg RLoop
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x21f:                      | Done:
0x21f: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x220:                      | End:
                            | #/* $end ncopy-ys */
0x220:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x220:                      | 	.align 8
0x220:                      | src:
0x220: 0100000000000000     | 	.quad 1
0x228: 0200000000000000     | 	.quad 2
0x230: fdffffffffffffff     | 	.quad -3
0x238: fcffffffffffffff     | 	.quad -4
0x240: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x250:                      | 	.align 16
0x250:                      | Predest:
0x250: fadebc0000000000     | 	.quad 0xbcdefa
0x258:                      | dest:
0x258: abefcd0000000000     | 	.quad 0xcdefab
0x260: abefcd0000000000     | 	.quad 0xcdefab
0x268: abefcd0000000000     | 	.quad 0xcdefab
0x270: abefcd0000000000     | 	.quad 0xcdefab
0x278:                      | Postdest:
0x278: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x280:                      | .align 8
                            | # Run time stack
0x280: 0000000000000000     | 	.quad 0
0x288: 0000000000000000     | 	.quad 0
0x290: 0000000000000000     | 	.quad 0
0x298: 0000000000000000     | 	.quad 0
0x2a0: 0000000000000000     | 	.quad 0
0x2a8: 0000000000000000     | 	.quad 0
0x2b0: 0000000000000000     | 	.quad 0
0x2b8: 0000000000000000     | 	.quad 0
0x2c0: 0000000000000000     | 	.quad 0
0x2c8: 0000000000000000     | 	.quad 0
0x2d0: 0000000000000000     | 	.quad 0
0x2d8: 0000000000000000     | 	.quad 0
0x2e0: 0000000000000000     | 	.quad 0
0x2e8: 0000000000000000     | 	.quad 0
0x2f0: 0000000000000000     | 	.quad 0
0x2f8: 0000000000000000     | 	.quad 0
                            | 
0x300:                      | Stack:
