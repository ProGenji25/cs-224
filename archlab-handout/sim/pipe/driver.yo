                            | #######################################################################
                            | # Test for copying block of size 1;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f41803000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20100000000000000 | 	irmovq $1, %rdx		# src and dst have 1 elements
0x014: 30f68802000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f76802000000000000 | 	irmovq src, %rdi	# src array
0x028: 803b00000000000000   | 	call ncopy		 
0x031: 80fc00000000000000   | 	call check	        # Call checker code
0x03a: 00                   | 	halt                    # should halt with 0xaaaa in %rax
0x03b:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x03b:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x03b: 6300                 | 	xorq %rax,%rax		# count = 0;
0x03d: c0f2ffffffffffffffff | 	iaddq $-1,%rdx		# len <= 0?
0x047: 71fb00000000000000   | 	jle Done		# if so, goto Done:
                            | 
0x050:                      | Loop:	
0x050: 50a70000000000000000 |     mrmovq (%rdi), %r10	# read val from src...
0x05a: 50b70800000000000000 |     mrmovq 8(%rdi), %r11
0x064: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x06e: 40b60800000000000000 |     rmmovq %r11, 8(%rsi)
0x078: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x07a: 718d00000000000000   | 	jle Npos1		# if so, goto Npos:
0x083: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x08d:                      | Npos1:
0x08d: 62bb                 |     andq %r11, %r11
0x08f: 71a200000000000000   |     jle Npos2
0x098: c0f00100000000000000 |     iaddq $1, %rax
0x0a2:                      | Npos2:	
0x0a2: c0f71000000000000000 | 	iaddq $16, %rdi		# src++
0x0ac: c0f61000000000000000 | 	iaddq $16, %rsi		# dst++
0x0b6: c0f2feffffffffffffff |     iaddq $-2,%rdx      #len-- >0?
0x0c0: 765000000000000000   | 	jg Loop			# if so, goto Loop:
0x0c9:                      | Npos3:
0x0c9: 74fb00000000000000   |     jne Done
0x0d2: 50a70000000000000000 |     mrmovq (%rdi), %r10
0x0dc: 40a60000000000000000 | 	rmmovq %r10, (%rsi)
0x0e6: 62aa                 | 	andq %r10, %r10
0x0e8: 71fb00000000000000   | 	jle Done
0x0f1: c0f00100000000000000 | 	iaddq $1, %rax
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x0fb:                      | Done:
0x0fb: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x0fc:                      | End:
                            | #/* $end ncopy-ys */
0x0fc:                      | EndFun:
                            | #################################################################### 
                            | # Epilogue code for the correctness testing driver
                            | ####################################################################
                            | 
                            | # This is the correctness checking code.
                            | # It checks:
                            | #   1. %rax has 1.  Set %rax to 0xbbbb if not.
                            | #   2. The total length of the code is less than or equal to 1000.
                            | #      Set %rax to 0xcccc if not.
                            | #   3. The source data was copied to the destination.
                            | #      Set %rax to 0xdddd if not.
                            | #   4. The words just before and just after the destination region
                            | #      were not corrupted.  Set %rax to 0xeeee if not.
                            | # If all checks pass, then sets %rax to 0xaaaa
0x0fc:                      | check:
                            | 	# Return value test
0x0fc: 30fa0100000000000000 | 	irmovq $1,%r10
0x106: 61a0                 | 	subq %r10,%rax
0x108: 732401000000000000   | 	je checkb
0x111: 30f0bbbb000000000000 | 	irmovq $0xbbbb,%rax  # Failed test #1
0x11b: 706202000000000000   | 	jmp cdone
0x124:                      | checkb:
                            | 	# Code length check
0x124: 30f0fc00000000000000 | 	irmovq EndFun,%rax
0x12e: 30f23b00000000000000 | 	irmovq StartFun,%rdx
0x138: 6120                 | 	subq %rdx,%rax
0x13a: 30f2e803000000000000 | 	irmovq $1000,%rdx
0x144: 6102                 | 	subq %rax,%rdx
0x146: 756201000000000000   | 	jge checkm
0x14f: 30f0cccc000000000000 | 	irmovq $0xcccc,%rax  # Failed test #2
0x159: 706202000000000000   | 	jmp cdone
0x162:                      | checkm:
0x162: 30f28802000000000000 | 	irmovq dest, %rdx # Pointer to next destination location
0x16c: 30f36802000000000000 | 	irmovq src,%rbx   # Pointer to next source location
0x176: 30f70100000000000000 | 	irmovq $1,%rdi  # Count
0x180: 6277                 | 	andq %rdi,%rdi
0x182: 73e001000000000000   | 	je checkpre         # Skip check if count = 0
0x18b:                      | mcloop:
0x18b: 50020000000000000000 | 	mrmovq (%rdx),%rax
0x195: 50630000000000000000 | 	mrmovq (%rbx),%rsi
0x19f: 6160                 | 	subq %rsi,%rax
0x1a1: 73bd01000000000000   | 	je  mok
0x1aa: 30f0dddd000000000000 | 	irmovq $0xdddd,%rax # Failed test #3
0x1b4: 706202000000000000   | 	jmp cdone
0x1bd:                      | mok:
0x1bd: 30f00800000000000000 | 	irmovq $8,%rax
0x1c7: 6002                 | 	addq %rax,%rdx	  # dest ++
0x1c9: 6003                 | 	addq %rax,%rbx    # src++
0x1cb: 30f00100000000000000 | 	irmovq $1,%rax
0x1d5: 6107                 | 	subq %rax,%rdi    # cnt--
0x1d7: 768b01000000000000   | 	jg mcloop
0x1e0:                      | checkpre:
                            | 	# Check for corruption
0x1e0: 30f28002000000000000 | 	irmovq Predest,%rdx
0x1ea: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word before destination
0x1f4: 30f2fadebc0000000000 | 	irmovq $0xbcdefa, %rdx
0x1fe: 6120                 | 	subq %rdx,%rax
0x200: 731c02000000000000   | 	je checkpost
0x209: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax  # Failed test #4
0x213: 706202000000000000   | 	jmp cdone
0x21c:                      | checkpost:
                            | 	# Check for corruption
0x21c: 30f29002000000000000 | 	irmovq Postdest,%rdx
0x226: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word after destination
0x230: 30f2bcfade0000000000 | 	irmovq $0xdefabc, %rdx
0x23a: 6120                 | 	subq %rdx,%rax
0x23c: 735802000000000000   | 	je checkok
0x245: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax # Failed test #4
0x24f: 706202000000000000   | 	jmp cdone
0x258:                      | checkok:
                            | 	# Successful checks
0x258: 30f0aaaa000000000000 | 	irmovq $0xaaaa,%rax
0x262:                      | cdone:
0x262: 90                   | 	ret
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x268:                      | 	.align 8
0x268:                      | src:
0x268: 0100000000000000     | 	.quad 1
0x270: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x280:                      | 	.align 16
0x280:                      | Predest:
0x280: fadebc0000000000     | 	.quad 0xbcdefa
0x288:                      | dest:
0x288: abefcd0000000000     | 	.quad 0xcdefab
0x290:                      | Postdest:
0x290: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x298:                      | .align 8
                            | # Run time stack
0x298: 0000000000000000     | 	.quad 0
0x2a0: 0000000000000000     | 	.quad 0
0x2a8: 0000000000000000     | 	.quad 0
0x2b0: 0000000000000000     | 	.quad 0
0x2b8: 0000000000000000     | 	.quad 0
0x2c0: 0000000000000000     | 	.quad 0
0x2c8: 0000000000000000     | 	.quad 0
0x2d0: 0000000000000000     | 	.quad 0
0x2d8: 0000000000000000     | 	.quad 0
0x2e0: 0000000000000000     | 	.quad 0
0x2e8: 0000000000000000     | 	.quad 0
0x2f0: 0000000000000000     | 	.quad 0
0x2f8: 0000000000000000     | 	.quad 0
0x300: 0000000000000000     | 	.quad 0
0x308: 0000000000000000     | 	.quad 0
0x310: 0000000000000000     | 	.quad 0
                            | 
0x318:                      | Stack:
